{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment",
    "Mappings": {
        "VpcCidrs": {
            "us-east-1": {
                "vpc": "10.0.0.0/16",
                "pubsubnet1": "10.0.0.0/24",
                "pubsubnet2": "10.0.1.0/24"
            }
        }
    },
    "Parameters": {
        "VpcId": {
            "Type": "String",
            "Description": "Optional - VPC Id of existing VPC. Leave blank to have a new VPC created",
            "Default": "",
            "AllowedPattern": "^(?:vpc-[0-9a-f]{8}|)$",
            "ConstraintDescription": "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created"
        },
        "ECSAMI": {
            "Description": "AMI ID",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"
        },
        "SubnetIds": {
            "Type": "CommaDelimitedList",
            "Description": "Optional - Comma separated list of existing VPC Subnet Ids where ECS instances will run",
            "Default": ""
        },
        "AsgMaxSize": {
            "Type": "Number",
            "Description": "Maximum size and initial Desired Capacity of ECS Auto Scaling Group",
            "Default": "2"
        }
    },
    "Conditions": {
        "CreateVpcResources": {
            "Fn::Equals": [
                {
                    "Ref": "VpcId"
                },
                ""
            ]
        },
        "ExistingVpcResources": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VpcId"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "Vpc": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        {
                            "Ref": "AWS::Region"
                        },
                        "vpc"
                    ]
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            }
        },
        "PubSubnetAz1": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        {
                            "Ref": "AWS::Region"
                        },
                        "pubsubnet1"
                    ]
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "PubSubnetAz2": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "VpcCidrs",
                        {
                            "Ref": "AWS::Region"
                        },
                        "pubsubnet2"
                    ]
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                }
            }
        },
        "InternetGateway": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteViaIgw": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PublicRouteViaIgw": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PubSubnet1RouteTableAssociation": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz1"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "PubSubnet2RouteTableAssociation": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz2"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "ecsServiceRole",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:*",
                                        "elasticloadbalancing:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ECSEC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:*",
                                        "ecr:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ECSEC2RoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ECSEC2Role"
                    }
                ]
            }
        },
        "ElbSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ELB Allowed Ports",
                "VpcId": {
                    "Fn::If": [
                        "CreateVpcResources",
                        {
                            "Ref": "Vpc"
                        },
                        {
                            "Ref": "VpcId"
                        }
                    ]
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "EcsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Allowed Ports",
                "VpcId": {
                    "Fn::If": [
                        "CreateVpcResources",
                        {
                            "Ref": "Vpc"
                        },
                        {
                            "Ref": "VpcId"
                        }
                    ]
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "ElbSecurityGroup"
                        }
                    }
                ]
            }
        },
        "EcsElasticLoadBalancer": {
            "Condition": "CreateVpcResources",
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "LoadBalancerName": "myLoadBalancer",
                "SecurityGroups": [
                    {
                        "Ref": "ElbSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "PubSubnetAz1"
                    },
                    {
                        "Ref": "PubSubnetAz2"
                    }
                ],
                "CrossZone": "true",
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "10",
                    "Interval": "30",
                    "Timeout": "5"
                }
            }
        },
        "EcsElasticLoadBalancerExistingVpc": {
            "Condition": "ExistingVpcResources",
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "ElbSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "SubnetIds"
                },
                "CrossZone": "true",
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "HealthCheck": {
                    "Target": "TCP:22",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5",
                    "Interval": "20",
                    "Timeout": "10"
                }
            }
        },
        "EcsInstanceLc": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "ECSAMI"
                },
                "InstanceType": "t2.medium",
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {
                    "Ref": "ECSEC2RoleInstanceProfile"
                },
                "SecurityGroups": [
                    {
                        "Ref": "EcsSecurityGroup"
                    }
                ]
            }
        },
        "EcsInstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    {
                        "Fn::Select": [
                            "0",
                            {
                                "Fn::GetAZs": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        ]
                    },
                    {
                        "Fn::Select": [
                            "1",
                            {
                                "Fn::GetAZs": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        ]
                    }
                ],
                "VPCZoneIdentifier": {
                    "Fn::If": [
                        "CreateVpcResources",
                        [
                            {
                                "Fn::Sub": "${PubSubnetAz1},${PubSubnetAz2}"
                            }
                        ],
                        {
                            "Ref": "SubnetIds"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "EcsInstanceLc"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "AsgMaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "AsgMaxSize"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "ECS Instance - ${AWS::StackName}"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": "default"
            }
        }
    }
}